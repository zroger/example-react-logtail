{"version":3,"sources":["LogService.js","App.js","index.js"],"names":["LogService","poll","callback","fetch","window","location","href","then","response","text","data","logs","split","map","line","trim","console","debug","length","loop","i","log","setTimeout","Math","random","IntersectionTarget","handleIntersection","entries","entry","find","target","_this","element","props","onChange","handleRef","observer","IntersectionObserver","options","disconnect","observe","_this$props","this","children","_this$props$Component","Component","react_default","a","createElement","ref","React","App","state","handleNewLog","_this2","setState","concat","scrollIntoView","isIntersecting","className","index","key","App_IntersectionTarget","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"yNA6BeA,SA1BI,CAKjBC,KALiB,SAKZC,GACHC,MAAMC,OAAOC,SAASC,KAAO,aAC1BC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJ,IAAMC,EAAOD,EAAKE,MAAM,MAAMC,IAAI,SAAAC,GAAI,OAAIA,EAAKC,SAC/CC,QAAQC,MAAM,gCAAiCN,EAAKO,QACpD,SAAUC,EAAKC,GACb,IAAMC,EAAMV,EAAKS,GACbC,IACFnB,EAASmB,GACTC,WAAW,WACTH,EAAKC,EAAI,IACQ,IAAhBG,KAAKC,WANZ,CAQG,QCjBLC,6MAQJC,mBAAqB,SAACC,GACpB,IAAMC,EAAQD,EAAQE,KAAK,SAAAD,GAAK,OAAIA,EAAME,SAAWC,EAAKC,UACtDJ,GACFG,EAAKE,MAAMC,SAASN,MASxBO,UAAY,SAACH,GACND,EAAKK,WACRL,EAAKK,SAAW,IAAIC,qBAClBN,EAAKL,mBACLK,EAAKE,MAAMK,UAGXN,IAAYD,EAAKC,SACnBD,EAAKK,SAASG,aAEZP,GACFD,EAAKK,SAASI,QAAQR,GAExBD,EAAKC,QAAUA,2EAGR,IAAAS,EAC6BC,KAAKT,MAAlCU,EADAF,EACAE,SADAC,EAAAH,EACUI,iBADV,IAAAD,EACoB,MADpBA,EAEP,OAAOE,EAAAC,EAAAC,cAACH,EAAD,CAAWI,IAAKP,KAAKP,WAAYQ,UAtCXO,IAAML,WAuGxBM,6MA5DbC,MAAQ,CACNzC,KAAM,GACNmB,OAAQ,QAaVuB,aAAe,SAAChC,GACdiC,EAAKC,SAAS,SAAAH,GAAK,MAAK,CACtBzC,KAAMyC,EAAMzC,KAAK6C,OAAO,CAACnC,OAE3B,IAAMS,EAASwB,EAAKF,MAAMtB,OACtBA,GACFA,EAAO2B,oBASX/B,mBAAqB,SAACE,GACpB0B,EAAKC,SAAS,CACZzB,OAAQF,EAAM8B,eAAiB9B,EAAME,OAAS,2FAvBhD9B,EAAWC,KAAKyC,KAAKW,+CA8Bd,IACC1C,EAAS+B,KAAKU,MAAdzC,KACR,OACEmC,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,QACZhD,EAAKE,IAAI,SAACQ,EAAKuC,GAAN,OACRd,EAAAC,EAAAC,cAAA,OAAKa,IAAKD,GACRd,EAAAC,EAAAC,cAAA,YAAO3B,OAIbyB,EAAAC,EAAAC,cAACc,EAAD,CAAoB5B,SAAUQ,KAAKhB,oBACjCoB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,4CArDME,IAAML,WC5CxBkB,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.2f950728.chunk.js","sourcesContent":["/**\n * Simulate a log polling API client.\n */\nconst LogService = {\n  /**\n   * This function will invoke the callback with a new log message,\n   * until the logs are exhausted, with a delay between each one.\n   */\n  poll(callback) {\n    fetch(window.location.href + \"/logs.txt\")\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        const logs = data.split(\"\\n\").map(line => line.trim());\n        console.debug(\"Loaded %d lines from log file\", logs.length);\n        (function loop(i) {\n          const log = logs[i];\n          if (log) {\n            callback(log);\n            setTimeout(() => {\n              loop(i + 1);\n            }, Math.random() * 500);\n          }\n        })(0);\n      });\n  }\n};\n\nexport default LogService;\n","import React from \"react\";\nimport \"./App.css\";\nimport LogService from \"./LogService.js\";\n\n/**\n * Wrapper componenet for the IntersectionObserver API.\n */\nclass IntersectionTarget extends React.Component {\n\n  /**\n   * Event handler for the IntersectionObserver.\n   * Filters entries to ensure events are for this component's target,\n   * then invokes the `onChange` prop with a single IntersectionObserverEntry.\n   * https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry\n   */\n  handleIntersection = (entries) => {\n    const entry = entries.find(entry => entry.target === this.element)\n    if (entry) {\n      this.props.onChange(entry);\n    }\n  };\n\n  /**\n   * Ref callback.\n   * On render, when React invokes this function with the actual DOM element\n   * that is created. This element is used as the target for the observer.\n   */\n  handleRef = (element) => {\n    if (!this.observer) {\n      this.observer = new IntersectionObserver(\n        this.handleIntersection,\n        this.props.options,\n      );\n    }\n    if (element !== this.element) {\n      this.observer.disconnect();\n    }\n    if (element) {\n      this.observer.observe(element);\n    }\n    this.element = element;\n  };\n\n  render() {\n    const {children, Component='div'} = this.props;\n    return <Component ref={this.handleRef}>{children}</Component>;\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    logs: [],\n    target: null,\n  };\n\n  /**\n   * When the component mounts, start polling for logs.\n   */\n  componentDidMount() {\n    LogService.poll(this.handleNewLog);\n  }\n\n  /**\n   * The callback appends the new log message to the `logs` array in the state.\n   */\n  handleNewLog = (log) => {\n    this.setState(state => ({\n      logs: state.logs.concat([log])\n    }));\n    const target = this.state.target;\n    if (target) {\n      target.scrollIntoView();\n    }\n  };\n\n  /**\n   * Handle intersection events.\n   * Store the event target in `state.target` if it is intersecting,\n   * i.e. it is visible in the viewport.\n   */\n  handleIntersection = (entry) => {\n    this.setState({\n      target: entry.isIntersecting ? entry.target : null,\n    });\n  }\n\n  /**\n   * Nothing fancy here. Render logs from the state object.\n   */\n  render() {\n    const { logs } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"logs\">\n          {logs.map((log, index) => (\n            <pre key={index}>\n              <code>{log}</code>\n            </pre>\n          ))}\n        </div>\n        <IntersectionTarget onChange={this.handleIntersection}>\n          <div className=\"intersection-target\">\n            <code>IntersectionTarget</code>\n          </div>\n        </IntersectionTarget>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}